Rushstack DB
------------

When configuring Accounts, create the DB in MYSQL:

CREATE DATABASE IF NOT EXISTS accounts;
GRANT ALL ON accounts.* TO 'accounts'@'localhost' IDENTIFIED BY 'accounts';
GRANT ALL ON accounts.* TO 'accounts'@'%' IDENTIFIED BY 'accounts';
flush privileges;


Configure the model:
accounts-manage db_sync

Convert base template to string:
cat TEMPLATE_FILE | tr -d '\n' | tr -d '\t' | sed 's/\\/\\\\/g'

Insert default data (review correct profiles and output from previous commmand)
use accounts;
insert into service_type(name,template,created_at,updated_at) values ('Small','{"AWSTemplateFormatVersion": "2010-09-09", "Outputs": {"InstanceIp": {"Description": "SSH command","Value": {"Fn::Join": ["", ["ssh epg@", {"Fn::GetAtt": ["FRONTAL", "PublicIp"]}]]}}},"Parameters": {"KeyName": {"Type": "String", "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance"}},"Resources": {    "WaitHandle" : {      "Type" : "AWS::CloudFormation::WaitConditionHandle"},"FRONTAL": {"Type": "AWS::EC2::Instance","Properties": {"UserData": {"Fn::Base64": { "Fn::Join" : ["", ["#!/bin/bash -v\\n","# Rush download & install launcher\\n","cd /dev/shm\\n","yum -y install wget\\n","wget http://10.95.158.5/repo/Rush.tgz\\n","wget http://10.95.158.5/repo/Rush.sh\\n","chmod a+rx Rush.sh\\n","yum -y install python python-devel gcc python-pip\\n","pip install heat-cfntools argparse\\n","./Rush.sh\\n","SIGNALURL=\\"",{"Ref" : "WaitHandle"},"\\"\\n","cfn-signal -e 0 \\"$SIGNALURL\\"\\n"]]}},"KeyName": {"Ref": "KeyName"},"InstanceType": "m1.small","ImageId": "EPG-TEMPLATE-CENTOS63x64","SecurityGroups" : [ {"Ref" : "RushServerSecurityGroup"} ]}},"IPAddress" : {"Type" : "AWS::EC2::EIP"},"IPAssoc" : {"Type" : "AWS::EC2::EIPAssociation","Properties" : {"InstanceId" : { "Ref" : "FRONTAL" },"EIP" : { "Ref" : "IPAddress" }}},"RushServerSecurityGroup" : {"Type" : "AWS::EC2::SecurityGroup","Properties" : {"GroupDescription" : "Enable RUSH access via port 5000","SecurityGroupIngress" : [{"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "5001", "ToPort" : "5001", "CidrIp" : "0.0.0.0/0"}]}},"WaitForTheHandle" : {    "Type" : "AWS::CloudFormation::WaitCondition",    "Properties" : {"Handle" : { "Ref" : "WaitHandle" }, "Timeout" : "600"}}}}',now(),now());
insert into service_type(name,template,created_at,updated_at) values ('Medium','{"AWSTemplateFormatVersion": "2010-09-09", "Outputs": {"InstanceIp": {"Description": "SSH command","Value": {"Fn::Join": ["", ["ssh epg@", {"Fn::GetAtt": ["FRONTAL", "PublicIp"]}]]}}},"Parameters": {"KeyName": {"Type": "String", "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance"}},"Resources": {    "WaitHandle" : {      "Type" : "AWS::CloudFormation::WaitConditionHandle"},"FRONTAL": {"Type": "AWS::EC2::Instance","Properties": {"UserData": {"Fn::Base64": { "Fn::Join" : ["", ["#!/bin/bash -v\\n","# Rush download & install launcher\\n","cd /dev/shm\\n","yum -y install wget\\n","wget http://10.95.158.5/repo/Rush.tgz\\n","wget http://10.95.158.5/repo/Rush.sh\\n","chmod a+rx Rush.sh\\n","yum -y install python python-devel gcc python-pip\\n","pip install heat-cfntools argparse\\n","./Rush.sh\\n","SIGNALURL=\\"",{"Ref" : "WaitHandle"},"\\"\\n","cfn-signal -e 0 \\"$SIGNALURL\\"\\n"]]}},"KeyName": {"Ref": "KeyName"},"InstanceType": "m1.small","ImageId": "EPG-TEMPLATE-CENTOS63x64","SecurityGroups" : [ {"Ref" : "RushServerSecurityGroup"} ]}},"IPAddress" : {"Type" : "AWS::EC2::EIP"},"IPAssoc" : {"Type" : "AWS::EC2::EIPAssociation","Properties" : {"InstanceId" : { "Ref" : "FRONTAL" },"EIP" : { "Ref" : "IPAddress" }}},"RushServerSecurityGroup" : {"Type" : "AWS::EC2::SecurityGroup","Properties" : {"GroupDescription" : "Enable RUSH access via port 5000","SecurityGroupIngress" : [{"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "5001", "ToPort" : "5001", "CidrIp" : "0.0.0.0/0"}]}},"WaitForTheHandle" : {    "Type" : "AWS::CloudFormation::WaitCondition",    "Properties" : {"Handle" : { "Ref" : "WaitHandle" }, "Timeout" : "600"}}}}',now(),now());
insert into service_type(name,template,created_at,updated_at) values ('Large','{"AWSTemplateFormatVersion": "2010-09-09", "Outputs": {"InstanceIp": {"Description": "SSH command","Value": {"Fn::Join": ["", ["ssh epg@", {"Fn::GetAtt": ["FRONTAL", "PublicIp"]}]]}}},"Parameters": {"KeyName": {"Type": "String", "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance"}},"Resources": {    "WaitHandle" : {      "Type" : "AWS::CloudFormation::WaitConditionHandle"},"FRONTAL": {"Type": "AWS::EC2::Instance","Properties": {"UserData": {"Fn::Base64": { "Fn::Join" : ["", ["#!/bin/bash -v\\n","# Rush download & install launcher\\n","cd /dev/shm\\n","yum -y install wget\\n","wget http://10.95.158.5/repo/Rush.tgz\\n","wget http://10.95.158.5/repo/Rush.sh\\n","chmod a+rx Rush.sh\\n","yum -y install python python-devel gcc python-pip\\n","pip install heat-cfntools argparse\\n","./Rush.sh\\n","SIGNALURL=\\"",{"Ref" : "WaitHandle"},"\\"\\n","cfn-signal -e 0 \\"$SIGNALURL\\"\\n"]]}},"KeyName": {"Ref": "KeyName"},"InstanceType": "m1.small","ImageId": "EPG-TEMPLATE-CENTOS63x64","SecurityGroups" : [ {"Ref" : "RushServerSecurityGroup"} ]}},"IPAddress" : {"Type" : "AWS::EC2::EIP"},"IPAssoc" : {"Type" : "AWS::EC2::EIPAssociation","Properties" : {"InstanceId" : { "Ref" : "FRONTAL" },"EIP" : { "Ref" : "IPAddress" }}},"RushServerSecurityGroup" : {"Type" : "AWS::EC2::SecurityGroup","Properties" : {"GroupDescription" : "Enable RUSH access via port 5000","SecurityGroupIngress" : [{"IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},{"IpProtocol" : "tcp", "FromPort" : "5001", "ToPort" : "5001", "CidrIp" : "0.0.0.0/0"}]}},"WaitForTheHandle" : {    "Type" : "AWS::CloudFormation::WaitCondition",    "Properties" : {"Handle" : { "Ref" : "WaitHandle" }, "Timeout" : "600"}}}}',now(),now());
